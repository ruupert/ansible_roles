---
# tasks file for ca

- name: "CA | Reset"
  tags:
    - never
    - reset
  block:
    - name: "Reset CA | rm cert keys"
      tags:
        - never
        - reset
      ansible.builtin.file:
        path: "/etc/ssl/private/{{ item }}.{{ domain }}.key"
        state: absent
      with_items: "{{ ca_ssl_cert_hosts }}"

    - name: "Reset CA | rm certs"
      tags:
        - never
        - reset
      ansible.builtin.file:
        path: "/etc/ssl/certs/{{ item }}.{{ domain }}.pem"
        state: absent
      with_items: "{{ ca_ssl_cert_hosts }}"

    - name: "Reset CA | rm ca key, crt, crl"
      tags:
        - never
        - reset
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "/etc/ssl/{{ domain }}.crl"
        - "/etc/ssl/certs/{{ domain }}.pem"
        - "/etc/ssl/private/{{ domain }}.key"
  rescue:
    - name: "CA | FAIL"
      ansible.builtin.debug:
        msg: "CA | FAILED"
      changed_when: true
      notify:
        - send failed message

- name: "CA"
  tags:
    - ca
  block:
    - name: "CA | Cert | dependencies"
      ansible.builtin.apt:
        name: python3-cryptography
        state: present

    - name: "Setfact"
      ansible.builtin.set_fact:
        ca_ssl_cert_hosts: "{{ groups['ssl'] }}"

    - name: "Create private key with password protection"
      community.crypto.openssl_privatekey:
        path: "/etc/ssl/private/{{ domain }}.key"
        cipher: "auto"
        passphrase: "{{ secret_ca_passphrase }}"

    - name: "Check CA .pem"
      ansible.builtin.stat:
        path: "/etc/ssl/certs/{{ domain }}.pem"
      register: ca_certificate_stat

    - name: Create certificate signing request (CSR) for CA certificate # noqa: run-once[task]
      community.crypto.openssl_csr_pipe:
        privatekey_path: "/etc/ssl/private/{{ domain }}.key"
        privatekey_passphrase: "{{ secret_ca_passphrase }}"
        organization_name: "IRB"
        country_name: "FI"
        common_name: "{{ domain }}"
        use_common_name_for_san: false
        basic_constraints:
          - 'CA:TRUE'
        basic_constraints_critical: true
        key_usage:
          - keyCertSign
          - cRLSign
        key_usage_critical: true
      when: not ca_certificate_stat.stat.exists
      register: ca_csr
      run_once: true

    - name: Create self-signed CA certificate from CSR
      community.crypto.x509_certificate:
        path: /etc/ssl/certs/{{ domain }}.pem
        csr_content: "{{ ca_csr.csr }}"
        privatekey_path: "/etc/ssl/private/{{ domain }}.key"
        privatekey_passphrase: "{{ secret_ca_passphrase }}"
        provider: selfsigned
      when: not ca_certificate_stat.stat.exists

    - name: "Check CA .crl"
      ansible.builtin.stat:
        path: "/etc/ssl/{{ domain }}.crl"
      register: ca_crl_reg

    - name: Generate a CRL
      community.crypto.x509_crl:
        path: "/etc/ssl/{{ domain }}.crl"
        privatekey_path: "/etc/ssl/private/{{ domain }}.key"
        privatekey_passphrase: "{{ secret_ca_passphrase }}"
        issuer:
          CN: "{{ domain }}"
        last_update: "+5d"
        next_update: "+7d"
        revoked_certificates: []
      when: not ca_crl_reg.stat.exists

    - name: "Generate SSL keys and certs"
      ansible.builtin.include_tasks:
        file: cert.yml
      loop: "{{ groups['ssl'] }}"
      loop_control:
        loop_var: loop_ssl_host

    - name: "Generate SSL cname keys and certs"
      ansible.builtin.include_tasks:
        file: cert.yml
      loop:
        - "{{ ca_cnames | map(attribute='name') | list }}"
      loop_control:
        loop_var: loop_ssl_host

  rescue:
    - name: "CA | FAIL"
      ansible.builtin.debug:
        msg: "CA | FAILED"
      changed_when: true
      notify:
        - send failed message
