- name: "Xorg"
  tags:
    - xorg
    - configure
  block:
    - name: "Xorg | Ensure HOME/.local/bin exists"
      ansible.builtin.file:
        path: "{{ home }}/.local/bin"
        state: directory
        mode: "0700"
        owner: "{{ username }}"
        group: "{{ username }}"

    - name: "Xorg | Copy hdmi script into ~/.local/bin"
      ansible.builtin.template:
        src: "templates/hdmi.j2"
        dest: "{{ home }}/.local/bin/hdmi"
        mode: "0700"
        owner: "{{ username }}"
        group: "{{ username }}"
      when: ansible_product_version == "ThinkPad X1 Carbon Gen 8"

    - name: "Xorg | Copy reload-xresources script into ~/.local/bin"
      ansible.builtin.copy:
        # src: "files/reload-xresources" # either separate file or embed:
        content: |
          #!/bin/bash
          # Ansible managed
          xrdb ~/.Xresources
        dest: "{{ home }}/.local/bin/reload-xresources"
        mode: "0700"
        owner: "{{ username }}"
        group: "{{ username }}"

    - name: "Xorg | Copy play script into ~/.local/bin"
      ansible.builtin.copy:
        # src: "files/reload-xresources" # either separate file or embed:
        content: |
          #!/bin/sh
          echo "$1" | grep -q youtu
          if [ $? -eq 0 ]; then
              echo playing
              yt-dlp -q -o- $1 | mpv -
          fi
          echo "$1" | grep -q vimeo
          if [ $? -eq 0 ]; then
              yt-dlp -q -o- $1 | mpv -
          fi
          echo "$1" | grep -q areena.yle.fi
          if [ $? -eq 0 ]; then
              yle-dl --pipe $1 | mpv --cache-default=15000 -
          fi
        dest: "{{ home }}/.local/bin/play"
        mode: "0700"
        owner: "{{ username }}"
        group: "{{ username }}"

    - name: "Xorg | Write ~/.xsessionrc"
      ansible.builtin.template:
        src: "templates/dotxsessionrc.j2"
        dest: "{{ home }}/.xsessionrc"
        mode: "0700"
        owner: "{{ username }}"
        group: "{{ username }}"

    - name: "Xorg | Ensure HOME/.local/share/icons exists"
      ansible.builtin.file:
        path: "{{ home }}/.local/share/icons"
        state: directory
        mode: "0700"
        owner: "{{ username }}"
        group: "{{ username }}"

    - name: "Xorg | Unzip icon theme into ~/.local/share/icons/"
      ansible.builtin.unarchive:
        src: "files/retrosmart-x11-cursors.tar"
        dest: "{{ home }}/.local/share/icons/"
        mode: "0755"
        owner: "{{ username }}"
        group: "{{ username }}"

    - name: "Xorg | Write ~/.Xresources"
      ansible.builtin.template:
        src: "templates/dotXresources.j2"
        dest: "{{ home }}/.Xresources"
        mode: "0700"
        owner: "{{ username }}"
        group: "{{ username }}"

#    - name: "Copy 20-intel.conf into xorg.conf.d"
#      ansible.builtin.copy:
#        content: |
#          Section "Device"
#              Identifier "Intel Graphics"
#              Driver "i915"
#              Option "TearFree"    "true"
#              Option "AccelMod"    "sna"
#              Option "DRI"         "3"
#          EndSection
#        dest: "/etc/X11/xorg.conf.d/20-intel.conf"
#        mode: "0755"
#        owner: "root"
#        group: "root"
#      when: ansible_product_version == "ThinkPad X1 Carbon Gen 8"

    - name: "Enable wireplumbler"
      ansible.builtin.service:
        name: wireplumber.service
        enabled: true
      become: true
      become_user: "{{ username }}"
      become_method: ansible.builtin.sudo
      when: ansible_product_version != "ThinkPad X1 Carbon Gen 8"

  rescue:
    - name: "Fail"
      ansible.builtin.debug:
        msg: "Fail"
      changed_when: true
      notify:
        - send failed message
