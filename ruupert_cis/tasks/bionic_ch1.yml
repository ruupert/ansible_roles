  # "1 Initial Setup ...... 18"
  # "1.1 Filesystem Configuration ...... 19"
- name: '1.1.1 Disable unused filesystems . 20'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Copy modprobe blacklist file over'
      ansible.builtin.copy:
        src: files/{{ ansible_distribution_release }}/1.1.1/modprobe-CIS.conf
        dest: /etc/modprobe.d/CIS.conf
        owner: root
        group: root
        mode: '0644'
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message
- name: '1.1.1.1 Ensure mounting of cramfs filesystems is disabled (Automated) .. 21'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Ensure cramfs module is not present'
      community.general.modprobe:
        name: cramfs
        state: absent
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message
- name: '1.1.1.2 Ensure mounting of freevxfs filesystems is disabled (Automated)  23'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Ensure freevxfs module is not present'
      community.general.modprobe:
        name: freevxfs
        state: absent
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message
- name: '1.1.1.3 Ensure mounting of jffs2 filesystems is disabled (Automated). 25'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Ensure jffs2 module is not present'
      community.general.modprobe:
        name: jffs2
        state: absent
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message
- name: '1.1.1.4 Ensure mounting of hfs filesystems is disabled (Automated) ... 27'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Ensure hfs is module not present'
      community.general.modprobe:
        name: hfs
        state: absent
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message
- name: '1.1.1.5 Ensure mounting of hfsplus filesystems is disabled (Automated) .. 29'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Ensure hfsplus module is not present'
      community.general.modprobe:
        name: hfsplus
        state: absent
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message
- name: '1.1.1.6 Ensure mounting of udf filesystems is disabled (Automated) ... 31'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Ensure udf module is not present'
      community.general.modprobe:
        name: udf
        state: absent
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message
#
#   /tmp points unapplicable in current setup. Too much work for reaching this compliance.
#
# - name: "1.1.2 Ensure /tmp is configured (Automated) ..... 33"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.3 Ensure nodev option set on /tmp partition (Automated)  36"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.4 Ensure nosuid option set on /tmp partition (Automated) ...... 38"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.5 Ensure noexec option set on /tmp partition (Automated) ...... 40"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
#
#   Doable but could be slightly dangerous: regex match and replace/add line mounting shm with
#   tmpfs /dev/shm tmpfs defaults,noexec,nodev,nosuid,seclabel 0 0
#
# - name: "1.1.6 Ensure /dev/shm is configured (Automated) .. 42"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.7 Ensure nodev option set on /dev/shm partition (Automated) .... 44"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.8 Ensure nosuid option set on /dev/shm partition (Automated) ... 45"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.9 Ensure noexec option set on /dev/shm partition (Automated) ... 46"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message


#
#  /var points unapplicable in current setup. Too much work for reaching this compliance.
#
# - name: "1.1.10 Ensure separate partition exists for /var (Automated) .. 47"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.11 Ensure separate partition exists for /var/tmp (Automated) ...... 49"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.12 Ensure /var/tmp partition includes the nodev option (Automated) .... 51"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.13 Ensure /var/tmp partition includes the nosuid option (Automated) ... 52"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.14 Ensure /var/tmp partition includes the noexec option (Automated) ... 53"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
#
#  /var/log points unapplicable in current setup. Too much work for reaching this compliance.
#
# - name: "1.1.15 Ensure separate partition exists for /var/log (Automated) . 54"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.16 Ensure separate partition exists for /var/log/audit (Automated) .. 56"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message

#
#   /home points unapplicable in current setup. Too much work for reaching this compliance.
#
# - name: "1.1.17 Ensure separate partition exists for /home (Automated)..... 58"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.18 Ensure /home partition includes the nodev option (Automated) ... 60"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
#
#   No removable media devices available so not applicable. Only if virtual devices are counted as removable media then yes:
#
# - name: "1.1.19 Ensure nodev option set on removable media partitions (Manual) ...... 61"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.20 Ensure nosuid option set on removable media partitions (Manual) ..... 62"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.1.21 Ensure noexec option set on removable media partitions (Manual) ..... 63"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message


# - name: "1.1.22 Ensure sticky bit is set on all world-writable directories (Automated) ...... 64"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message

#
#  TODO at least the check that automounting is disabled. May require shm and other tempfs to be in fstab
#
- name: '1.1.23 Disable Automounting (Automated) ... 65'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    ## the following is unnecessary as the package is made sure to be removed in the task after
    #    - name: "Ensure autofs service is disabled"
    #      ansible.builtin.systemd:
    #        name: autofs
    #        enabled: no
    - name: 'Ensure autofs is not installed'
      ansible.builtin.apt:
        name: autofs
        state: absent
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message

#
#   In cloud environments you rarely have have USB media.
#
- name: '1.1.24 Disable USB Storage (Automated) . 67'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Copy modprobe blacklist file over'
      ansible.builtin.copy:
        src: files/{{ ansible_distribution_release }}/1.1.24/usb-storage.conf
        dest: /etc/modprobe.d/usb-storage.conf
        owner: root
        group: root
        mode: "0644"
    - name: 'Ensure usb-storage module is not present'
      community.general.modprobe:
        name: usb-storage
        state: absent
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message

# # "1.2 Configure Software Updates  69"

- name: '1.2.1 Ensure package manager repositories are configured (Manual) . 70'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Copy the apt.sources list in case change'
      ansible.builtin.copy:
        src: files/{{ ansible_distribution_release }}/1.2.1/sources.list.18.04
        dest: /etc/apt/sources.list
        owner: root
        group: root
        mode: "0644"
        backup: true
      register: ruupert_cis_file_updated

    - name: "Update cache" # noqa: no-handler
      ansible.builtin.apt:
        update_cache: true
      when: ruupert_cis_file_updated.changed
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message
#
#  ToDo:  - get gpg keys from ubuntu and possible others and loop over same task comparing remote gpg keys and fail if mismatch
#
# - name: "1.2.2 Ensure GPG keys are configured (Manual) . 71"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# # "1.3 Filesystem Integrity Checking .... 72"

- name: '1.3.1 Ensure AIDE is installed (Automated) ... 73'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04" and enable_aide
  block:
    - name: 'Ensure AIDE is installed'
      ansible.builtin.apt:
        name: aide
        state: present
      register: aide_presence

    - name: 'Copy aide.conf to remote with /mnt/prometheus ignored'
      ansible.builtin.copy:
        src: files/{{ ansible_distribution_release }}/1.3.1/aide.conf
        dest: /etc/aide/aide.conf
        owner: root
        group: root
        mode: "0644"
        backup: true
      register: aide_copy_conf

    - name: 'Check /var/lib/aide/aide.db existence'
      ansible.builtin.stat:
        path: /var/lib/aide/aide.db
      register: aide_db_presence

    - name: 'Initialize AIDE local database' # noqa: no-changed-when
      ansible.builtin.command: aideinit
      when: aide_db_presence.stat.exists
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message

- name: '1.3.1 Ensure AIDE is not installed. Disabled as AIDE should be configured too (Automated) ... 73'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04" and not enable_aide
  block:
    - name: 'Ensure AIDE is not installed'
      ansible.builtin.apt:
        name: aide
        state: absent
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message

#
#  May not be an acceptable solution to just check that the file exists.
#
- name: '1.3.2 Ensure filesystem integrity is regularly checked (Automated) .... 75'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04" and enable_aide
  block:
    - name: 'Check that /etc/cron.daily/aide path exists - crude solution, may need attention'
      ansible.builtin.stat:
        path: /etc/cron.daily/aide
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message

# # "1.4 Secure Boot Settings . 78"

#
#   Needs a bit of thought of the implications. basicly changing grub.cfg mode to 0400
#
# - name: "1.4.1 Ensure permissions on bootloader config are not overridden (Automated) 79"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message

# - name: "1.4.2 Ensure bootloader password is set (Automated)... 81"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.4.3 Ensure permissions on bootloader config are configured (Automated) . 83"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.4.4 Ensure authentication required for single user mode (Automated) . 85"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message

# # "1.5 Additional Process Hardening ... 86"

# - name: "1.5.1 Ensure XD/NX support is enabled (Manual) ..... 87"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
- name: '1.5.2 Ensure address space layout randomization (ASLR) is enabled (Automated) ...... 89'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Set sysctl kernel.randomize_va_space = 2'
      ansible.posix.sysctl:
        name: kernel.randomize_va_space
        value: '2'
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message

- name: '1.5.3 Ensure prelink is disabled (Automated) ...... 92'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Ensure prelink is not installed'
      ansible.builtin.apt:
        name: prelink
        state: absent
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message

- name: '1.5.4 Ensure core dumps are restricted (Automated) ..... 94'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Copy coredump.conf to limit.d'
      ansible.builtin.copy:
        src: files/{{ ansible_distribution_release }}/1.5.4/coredump.conf
        dest: /etc/security/limits.d/coredump.conf
        owner: root
        group: root
        mode: "0644"
        backup: true
    - name: 'Ensure core dumps are restricted (fs.suid_dumpable = 0)'
      ansible.posix.sysctl:
        name: fs.suid_dumpable
        value: '0'
  # - name: placeholder one task after
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message


# # "1.6 Mandatory Access Control .... 96"

#
#  Danger zone =D
#

# - name: "1.6.1 Configure AppArmor ...... 97"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.6.1.1 Ensure AppArmor is installed (Automated) .. 98"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.6.1.2 Ensure AppArmor is enabled in the bootloader configuration (Automated) ...... 99"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.6.1.3 Ensure all AppArmor Profiles are in enforce or complain mode (Automated) ...... 101"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.6.1.4 Ensure all AppArmor Profiles are enforcing (Automated)  103"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message

# # "1.7 Command Line Warning Banners .. 105"
- name: '1.7.1 Ensure message of the day is configured properly (Automated) ...... 106'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Set the message of the day'
      ansible.builtin.copy:
        src: files/{{ ansible_distribution_release }}/1.7.1/motd
        dest: /etc/motd
        owner: root
        group: root
        mode: "0644"
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message

- name: '1.7.2 Ensure permissions on /etc/issue.net are configured (Automated) ...... 108'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Set owner and permissions of /etc/issue.net'
      ansible.builtin.file:
        owner: root
        group: root
        mode: "0644"
        path: /etc/issue.net
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message

- name: '1.7.3 Ensure permissions on /etc/issue are configured (Automated) ...... 109'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Set owner and permissions of /etc/issue'
      ansible.builtin.file:
        owner: root
        group: root
        mode: "0644"
        path: /etc/issue
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message

#
#  This is being configured in 1.7.1.
#
# - name: "1.7.4 Ensure permissions on /etc/motd are configured (Automated) ...... 110"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#   - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       -  send failed message to slack
#

# - name: "1.7.5 Ensure remote login warning banner is configured properly (Automated) .... 112"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.7.6 Ensure local login warning banner is configured properly (Automated) .... 114"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# # "1.8 GNOME Display Manager .... 116"

- name: '1.8.1 Ensure GNOME Display Manager is removed (Manual) .. 117'
  tags:
    - cis
  when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
  block:
    - name: 'Ensure gdm3 is not installed'
      ansible.builtin.apt:
        name: gdm3
        state: absent
  rescue:
    - name: 'Send failure message'
      ansible.builtin.debug:
        msg: 'fail'
      changed_when: true
      notify:
        - send failed message
#

#  No gnome display manager on any hosts as configured above
#
# - name: "1.8.2 Ensure GDM login banner is configured (Automated) ..... 118"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.8.3 Ensure disable-user-list is enabled (Automated) . 120"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message
# - name: "1.8.4 Ensure XDCMP is not enabled (Automated) .... 122"
#   when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "18.04"
#   block:
#    - name: placeholder
#   rescue:
#   - name: "Send failure message"
#     debug:
#       msg: "fail"
#     changed_when: true
#     ansible.builtin.notify:
#       - send failed message

# # "1.9 Ensure updates, patches, and additional security software are installed (Manual) ...... 124"
# #
# #   This task is handles by the automatic update schedule. Basicly apt update and apt upgrade
# #
